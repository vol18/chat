import socket
import threading
import sqlite3

clients = []

conn = sqlite3.connect('chat_messages.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL,
    message TEXT NOT NULL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()

def handle_client(client_socket, client_address):
    print(f"[INFO] Client {client_address} connected.")
    username = client_socket.recv(1024).decode('utf-8')
    clients.append((client_socket, username))
    print(f"[INFO] Username {username} added.")

    while True:
        try:
            message = client_socket.recv(1024).decode('utf-8')
            if message:
                print(f"[INFO] Received message from {username}: {message}")
                broadcast_message(f"{username}: {message}", client_socket)
                save_message(username, message)
            else:
                remove_client(client_socket)
                break
        except Exception as e:
            print(f"[ERROR] {e}")
            remove_client(client_socket)
            break

def broadcast_message(message, client_socket):
    for client, _ in clients:
        if client != client_socket:
            try:
                client.send(message.encode('utf-8'))
            except Exception as e:
                print(f"[ERROR] {e}")
                remove_client(client)

def save_message(username, message):
    cursor.execute('''
    INSERT INTO messages (username, message) VALUES (?, ?)
    ''', (username, message))
    conn.commit()

def remove_client(client_socket):
    for client, username in clients:
        if client == client_socket:
            clients.remove((client, username))
            print(f"[INFO] Client {username} disconnected.")
            break

def start_server():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server.bind(('0.0.0.0', 5555))
    server.listen(5)
    print("[INFO] Server started and listening on port 5555.")

    while True:
        client_socket, client_address = server.accept()
        print(f"[INFO] Accepted connection from {client_address}")
        client_handler = threading.Thread(
            target=handle_client,
            args=(client_socket, client_address)
        )
        client_handler.start()

if __name__ == "__main__":
    start_server()
